"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LeafValueCoder = void 0;
const bignumber_js_1 = __importDefault(require("bignumber.js"));
const constants_1 = require("../constants");
const ethers_1 = require("ethers");
const helpers_1 = require("../utils/helpers");
class LeafValueCoder {
}
exports.LeafValueCoder = LeafValueCoder;
/**
 *
 * @param n {number | string}
 * @param label
 * @param bits
 */
LeafValueCoder.encode = (n, label, bits = 256) => {
    const hex = LeafValueCoder.isFixedValue(label)
        ? LeafValueCoder.fixedValueToHex(n)
        : new bignumber_js_1.default(n, 10).times(constants_1.NUMERIC_MULTIPLIER).toString(16);
    return LeafValueCoder.encodeHex(hex, bits);
};
LeafValueCoder.encodeHex = (leafAsHex, bits = 256) => {
    if (!ethers_1.utils.isHexString(helpers_1.prepend0x(leafAsHex))) {
        throw Error(`${leafAsHex} is not valid hex value`);
    }
    const bytes = bits / 8;
    const buff32 = Buffer.alloc(bytes).fill(0);
    const value = Buffer.from(helpers_1.evenHex(leafAsHex), 'hex');
    value.copy(buff32, bytes - value.length);
    return buff32;
};
/**
 *
 * @param leafAsHex {string} data in hex format
 * @param label {string}
 */
LeafValueCoder.decode = (leafAsHex, label) => {
    const bn = new bignumber_js_1.default(leafAsHex, 16);
    return LeafValueCoder.isFixedValue(label) ? bn.toFixed() : bn.div(constants_1.NUMERIC_MULTIPLIER).toNumber();
};
LeafValueCoder.isFixedValue = (label) => label.startsWith(constants_1.FIXED_NUMBER_PREFIX);
LeafValueCoder.fixedValueToHex = (n) => {
    if (typeof n === 'number') {
        return n.toString(16);
    }
    return new bignumber_js_1.default(n || '0', n.startsWith('0x') ? 16 : 10).toString(16);
};
//# sourceMappingURL=LeafValueCoder.js.map