import { IAPIClientOptions } from '../models/APIClientOptions';
import { IBlock } from '../models/ChainBlock';
import { IBlockLeafWithProof } from '../models/BlockLeafWithProof';
import { IProofs } from '../models/Proofs';
import { BigNumber } from 'ethers';
export declare class APIClient {
    private options;
    private axios;
    constructor(options: IAPIClientOptions);
    getBlocks(options?: {
        offset?: number;
        limit?: number;
    }): Promise<IBlock[]>;
    getBlock(blockId: number): Promise<IBlock>;
    getNewestBlock(): Promise<IBlock>;
    getLeavesOfBlock(blockId: number): Promise<IBlockLeafWithProof[]>;
    getProofs(keys: string[]): Promise<IProofs | null>;
    /**
     * Uses verifyProofForBlock method of the Chain contract.
     * @see https://kovan.etherscan.io/address/[contract-address]#readContract
     */
    verifyProofForNewestBlock<T extends string | number = string | number>(key: string): Promise<{
        success: boolean;
        value: T;
        dataTimestamp: Date;
    }>;
    static transformBlockFromApi(apiBlockData: IBlock): IBlock;
    static transformBlocksFromApi(apiBlocksData: IBlock[]): IBlock[];
}
export interface IChainBlock {
    _id: string;
    blockId: number;
    anchor: BigNumber;
    dataTimestamp: Date;
    root: string;
    minter: string;
    staked: BigNumber;
    power: BigNumber;
    voters: string[];
    /**
     * An object, where keys are addresses, and values are votes.
     */
    votes: {
        [address: string]: string;
    };
}
//# sourceMappingURL=APIClient.d.ts.map