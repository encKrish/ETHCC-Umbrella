"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Registry = void 0;
const ethers_1 = require("ethers");
const registry_abi_1 = require("./abi/registry.abi");
class Registry {
    constructor(web3Provider, registryContractAddress) {
        this.getAddress = async (name) => this.contract.getAddress(this.strToBytes32(name));
        this.strToBytes32 = (str) => {
            const bytes = Buffer.from(str).toString('hex');
            if (bytes.length > 64) {
                throw Error(`name is to long, max supported length is 32 bytes, got: ${bytes.length / 2}`);
            }
            return `0x${bytes}${'0'.repeat(64 - bytes.length)}`;
        };
        if (!registryContractAddress) {
            throw Error('registryContractAddress is empty');
        }
        this.contract = new ethers_1.ethers.Contract(registryContractAddress, registry_abi_1.registryAbi, web3Provider);
    }
}
exports.Registry = Registry;
//# sourceMappingURL=Registry.js.map