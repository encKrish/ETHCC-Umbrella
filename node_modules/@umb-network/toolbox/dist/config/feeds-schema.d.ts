declare const _default: {
    description: string;
    type: string;
    propertyNames: {
        pattern: string;
    };
    patternProperties: {
        '.*': {
            type: string;
            $ref: string;
        };
    };
    minProperties: number;
    definitions: {
        feed: {
            properties: {
                discrepancy: {
                    type: string;
                };
                precision: {
                    type: string;
                };
                inputs: {
                    type: string;
                    minItems: number;
                    items: {
                        $ref: string;
                    };
                };
            };
            required: string[];
            additionalProperties: boolean;
        };
        input: {
            properties: {
                fetcher: {
                    oneOf: {
                        $ref: string;
                    }[];
                };
                calculator: {
                    type: string;
                    properties: {
                        name: {
                            enum: string[];
                        };
                    };
                    required: never[];
                    additionalProperties: boolean;
                };
            };
            required: string[];
            additionalProperties: boolean;
        };
        GVolImpliedVolatilityFetcher: {
            properties: {
                name: {
                    const: string;
                };
                params: {
                    type: string;
                    properties: {
                        query: {
                            type: string;
                        };
                        sym: {
                            type: string;
                        };
                    };
                    required: string[];
                    additionalProperties: boolean;
                };
            };
            required: string[];
            additionalProperties: boolean;
        };
        CryptoComparePriceFetcher: {
            properties: {
                name: {
                    const: string;
                };
                params: {
                    type: string;
                    properties: {
                        fsym: {
                            type: string;
                        };
                        tsyms: {
                            type: string;
                        };
                    };
                    required: string[];
                    additionalProperties: boolean;
                };
            };
            required: string[];
            additionalProperties: boolean;
        };
        CryptoComparePriceWSFetcher: {
            properties: {
                name: {
                    const: string;
                };
                params: {
                    type: string;
                    properties: {
                        fsym: {
                            type: string;
                        };
                        tsym: {
                            type: string;
                        };
                        freshness: {
                            type: string;
                        };
                    };
                    required: string[];
                    additionalProperties: boolean;
                };
            };
            required: string[];
            additionalProperties: boolean;
        };
        CryptoCompareHistoHourFetcher: {
            properties: {
                name: {
                    const: string;
                };
                params: {
                    type: string;
                    properties: {
                        fsym: {
                            type: string;
                        };
                        tsym: {
                            type: string;
                        };
                        limit: {
                            type: string;
                        };
                    };
                    required: string[];
                    additionalProperties: boolean;
                };
            };
            required: string[];
            additionalProperties: boolean;
        };
        CryptoCompareHistoDayFetcher: {
            properties: {
                name: {
                    const: string;
                };
                params: {
                    type: string;
                    properties: {
                        fsym: {
                            type: string;
                        };
                        tsym: {
                            type: string;
                        };
                        limit: {
                            type: string;
                        };
                    };
                    required: string[];
                    additionalProperties: boolean;
                };
            };
            required: string[];
            additionalProperties: boolean;
        };
        CoinmarketcapPriceFetcher: {
            properties: {
                name: {
                    const: string;
                };
                params: {
                    type: string;
                    properties: {
                        symbol: {
                            type: string;
                        };
                        convert: {
                            type: string;
                        };
                    };
                    required: string[];
                    additionalProperties: boolean;
                };
            };
            required: string[];
            additionalProperties: boolean;
        };
        CoinmarketcapHistoHourFetcher: {
            properties: {
                name: {
                    const: string;
                };
                params: {
                    type: string;
                    properties: {
                        symbol: {
                            type: string;
                        };
                        convert: {
                            type: string;
                        };
                        count: {
                            type: string;
                        };
                    };
                    required: string[];
                    additionalProperties: boolean;
                };
            };
            required: string[];
            additionalProperties: boolean;
        };
        CoinmarketcapHistoDayFetcher: {
            properties: {
                name: {
                    const: string;
                };
                params: {
                    type: string;
                    properties: {
                        symbol: {
                            type: string;
                        };
                        convert: {
                            type: string;
                        };
                        count: {
                            type: string;
                        };
                    };
                    required: string[];
                    additionalProperties: boolean;
                };
            };
            required: string[];
            additionalProperties: boolean;
        };
        CoingeckoPriceFetcher: {
            properties: {
                name: {
                    const: string;
                };
                params: {
                    type: string;
                    properties: {
                        id: {
                            type: string;
                        };
                        currency: {
                            type: string;
                        };
                    };
                    required: string[];
                    additionalProperties: boolean;
                };
            };
            required: string[];
            additionalProperties: boolean;
        };
        PolygonIOPriceFetcher: {
            properties: {
                name: {
                    const: string;
                };
                params: {
                    type: string;
                    properties: {
                        sym: {
                            type: string;
                        };
                    };
                    required: string[];
                    additionalProperties: boolean;
                };
            };
            required: string[];
            additionalProperties: boolean;
        };
        PolygonIOStockPriceFetcher: {
            properties: {
                name: {
                    const: string;
                };
                params: {
                    type: string;
                    properties: {
                        sym: {
                            type: string;
                        };
                    };
                    required: string[];
                    additionalProperties: boolean;
                };
            };
            required: string[];
            additionalProperties: boolean;
        };
        PolygonIOCryptoPriceFetcher: {
            properties: {
                name: {
                    const: string;
                };
                params: {
                    type: string;
                    properties: {
                        fsym: {
                            type: string;
                        };
                        tsym: {
                            type: string;
                        };
                    };
                    required: string[];
                    additionalProperties: boolean;
                };
            };
            required: string[];
            additionalProperties: boolean;
        };
        IEXEnergyFetcher: {
            properties: {
                name: {
                    const: string;
                };
                params: {
                    type: string;
                    properties: {
                        sym: {
                            type: string;
                        };
                    };
                    required: string[];
                    additionalProperties: boolean;
                };
            };
            required: string[];
            additionalProperties: boolean;
        };
        BEACPIAverageFetcher: {
            properties: {
                name: {
                    const: string;
                };
                params: {
                    type: string;
                    properties: {
                        months: {
                            type: string;
                        };
                    };
                    required: string[];
                    additionalProperties: boolean;
                };
            };
            required: string[];
            additionalProperties: boolean;
        };
        OnChainDataFetcher: {
            properties: {
                name: {
                    const: string;
                };
                params: {
                    type: string;
                    properties: {
                        address: {
                            type: string;
                        };
                        method: {
                            type: string;
                        };
                        inputs: {
                            type: string;
                        };
                        outputs: {
                            type: string;
                        };
                        args: {
                            type: string;
                        };
                    };
                    required: string[];
                    additionalProperties: boolean;
                };
            };
            required: string[];
            additionalProperties: boolean;
        };
    };
};
export default _default;
//# sourceMappingURL=feeds-schema.d.ts.map